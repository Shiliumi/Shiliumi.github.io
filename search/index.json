[{"content":"1 修改字体 （1）自行准备字体文件，将文件放在assets/font目录下\n（2）将以下代码修改并复制到layouts/partials/footer/custom.html文件中\n**字体名：**给字体命名，需要保持统一 字体文件名：字体文件全名，也就是xxx.ttf 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 {{ $font := resources.Get \u0026#34;font/字体文件名\u0026#34; }} {{ if $font }} \u0026lt;style\u0026gt; @font-face { font-family: \u0026#39;字体名\u0026#39;; src: url(\u0026#39;{{ $font.RelPermalink }}\u0026#39;) format(\u0026#39;truetype\u0026#39;); font-display: swap; } :root { --base-font-family: \u0026#39;字体名\u0026#39;, serif; --code-font-family: \u0026#39;字体名\u0026#39;, monospace; } \u0026lt;/style\u0026gt; {{ else }} \u0026lt;!-- 字体文件未找到，使用系统默认字体 --\u0026gt; \u0026lt;style\u0026gt; :root { --base-font-family: serif; --code-font-family: monospace; } \u0026lt;/style\u0026gt; {{ end }} 这样我们的博客字体就修改好了\n2 修改鼠标样式 （1）准备好鼠标样式图片（默认，指针，文本……），图片大小建议控制在32px左右，将图片放入static/mouse文件夹中 （2）修改assets/scss/custom.scss，将以下代码复制进去，根据主题按实际情况填写对应的css选择器 1 2 3 4 5 6 7 8 9 10 11 // 【鼠标样式常规写法】 body, html { cursor: url(../mouse/默认光标图片名), auto !important; } css选择器 { cursor: url(../mouse/其他光标图片名), auto; } （3）以下是调好的Stack主题鼠标样式 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 // 【Stack主题鼠标样式写法】 // default光标图片 body, html, .article-content img { cursor: url(../mouse/默认光标图片名), auto !important; } // pointer光标图片 a:hover, button:hover, .copyCodeButton:hover, #dark-mode-toggle { cursor: url(../mouse/指针光标图片名), auto; } // text光标图片 input:hover, .site-description, .article-subtitle, .article-content span, .article-content li, .article-content p { cursor: url(../mouse/文本光标图片名), auto; } 3 显示文章更新时间 （1）在配置文件 hugo.yaml 中加入以下配置 1 2 3 4 5 6 7 8 # 更新时间：优先读取git时间 -\u0026gt; git时间不存在，就读取本地文件修改时间 frontmatter: lastmod: - :git - :fileModTime # 允许获取Git信息\tenableGitInfo: true （2）修改github action文件.github/workflows/xxx.yaml，在运行 hugo -D 命令的step前加入以下配置 1 2 3 4 5 6 7 8 9 jobs: deploy: steps: - name: Git Configuration run: | git config --global core.quotePath false git config --global core.autocrlf false git config --global core.safecrlf true git config --global core.ignorecase false (3)这样通过github action提交代码时，就会读取git时间，从而更新文章的更新时间 stack主题的文章更新时间在文章底部 若想在文章开头就显示更新时间，修改layouts/partials/article/components/details.html，在指定位置引入以下代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 \u0026lt;div class=\u0026#34;article-details\u0026#34;\u0026gt; ... \u0026lt;footer class=\u0026#34;article-time\u0026#34;\u0026gt; ... \u0026lt;!-- 更新时间 --\u0026gt; {{- if ne .Lastmod .Date -}} \u0026lt;div class=\u0026#34;article-lastmod\u0026#34;\u0026gt; {{ partial \u0026#34;helper/icon\u0026#34; \u0026#34;clock\u0026#34; }} \u0026lt;time\u0026gt; {{ .Lastmod.Format ( or .Site.Params.dateFormat.lastUpdated \u0026#34;Jan 02, 2006 15:04 MST\u0026#34; ) }} \u0026lt;/time\u0026gt; \u0026lt;/div\u0026gt; {{- end -}} .... \u0026lt;/footer\u0026gt; ... \u0026lt;/div\u0026gt; 这样就会文章开头显示修改时间 更新时间的格式去 hugo.yaml 中的 params.dateFormat.lastUpdated 进行修改\n4 友链、归档多列显示 修改assets/scss/custom.scss文件，引入以下css样式代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 @media (min-width: 1024px) { .article-list--compact { display: grid; // 目前是两列，如需三列，则后面再加一个1fr，以此类推 grid-template-columns: 1fr 1fr; background: none; box-shadow: none; gap: 1rem; article { background: var(--card-background); border: none; box-shadow: var(--shadow-l2); margin-bottom: 8px; margin-right: 8px; border-radius: 16px; } } } 5 自定义MD引用块颜色模板 参考文章：让Hugo支持GitHub风格的块引用Alerts\n（1）创建文件layouts/_default/_markup/render-blockquote-alert.html，并将以下代码复制进去\n1 2 3 \u0026lt;blockquote class=\u0026#34;alert alert-{{ .AlertType }}\u0026#34;\u0026gt; {{ .Text | safeHTML -}} \u0026lt;/blockquote\u0026gt; （2）将以下代码复制进assets/scss/custom.scss文件中 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 [data-scheme=\u0026#34;light\u0026#34;] { .alert-note { --card-separator-color: #65bbee; --blockquote-background-color: #e7f2fa; } .alert-tip { --card-separator-color: #55aa55; --blockquote-background-color: #eeffee; } .alert-warn { --card-separator-color: #ffbb78; --blockquote-background-color: #ffeecc; } .alert-error { --card-separator-color: #cc3334; --blockquote-background-color: #ffeeef; } } [data-scheme=\u0026#34;dark\u0026#34;] { .alert-note { --card-separator-color: #006699; --blockquote-background-color: #002234; } .alert-tip { --card-separator-color: #336733; --blockquote-background-color: #112310; } .alert-warn { --card-separator-color: #aa5501; --blockquote-background-color: #452300; } .alert-error { --card-separator-color: #880000; --blockquote-background-color: #450000; } } 配色参考来源：martignoni/hugo-notice （3）使用方法\n可选项：NOTE | TIP | WARN | ERROR 可仿照上面css写法，自行添加新的css样式，来实现更多的可选项 1 2 \u0026gt; [!NOTE] \u0026gt; 这是markdown的引用块语法 效果展示 这是NOTE\n这是TIP\n这是WARN\n这是ERROR\n","date":"2025-09-14T23:34:59+08:00","image":"https://Shiliumi.github.io/p/0914-stack_theme_custom/cover_hu_9cdfeb23b240b13.jpg","permalink":"https://Shiliumi.github.io/p/0914-stack_theme_custom/","title":"【Hugo】Stack主题自定义修改"},{"content":"1 引入音乐播放器 【Aplayer官方文档】 （1）在博客主目录中创建文件layouts\\partials\\footer\\custom.html，此文件为Stack主题作者留给我们加入自定义组件用的文件(可以查看主题源码同路径文件找到) （2）查看官方文档，引入对应的脚本，css到custom.html中，页面最下面就会出现音乐播放器 1 2 3 \u0026lt;link href=\u0026#34;https://cdn.bootcss.com/aplayer/1.10.1/APlayer.min.css\u0026#34; rel=\u0026#34;stylesheet\u0026#34;\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.bootcss.com/aplayer/1.10.1/APlayer.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/meting@2.0.1/dist/Meting.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; （3）Aplayer原生用法： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 \u0026lt;div id=\u0026#34;aplayer01\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34;\u0026gt; const ap = new APlayer({ //定义容器 container: document.getElementById(\u0026#39;aplayer01\u0026#39;), //关于音频的相关参数： audio: [{ name: \u0026#39;碧い瞳のエリス\u0026#39;,//音频名称 artist: \u0026#39;安全地帯\u0026#39;,//艺术家 url: \u0026#39;https://doge.ottoli.cn/安全地帯 - 碧い瞳のエリス.mp3\u0026#39;,//文件地址 cover: \u0026#39;https://doge.ottoli.cn/aqdd.jpg\u0026#39;//封面地址 }] }); \u0026lt;/script\u0026gt; 更多用法请考：APlayer官方文档\n（4）APlayer 原生用法设置参数十分繁琐，而且只能调用音频文件直链，增加服务器开销。而使用 MetingJS 就很好地解决了这个问题。一个MetingJS播放器至少需要三个参数： 1 2 3 id=\u0026#39;外链播放器id\u0026#39;,必须参数,Id type=[song=单曲, playlist=歌单, album=专辑, search=搜索结果, artist=艺术家],必须参数,调用类型 server=[netease=网易云音乐, tencent=QQ音乐, kugou=酷狗音乐, xiami=虾米音乐, baidu=百度音乐],必须参数,调用的API 在只设置了这三个参数的情况下，列表默认展开，且播放器显示占用地方较大，可以再设置以下两个参数：\n1 2 3 fixed = 启用固定模式，固定在左下角,默认false mini = 启用迷你模式,默认false 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 \u0026lt;!--MetingJS参数详情--\u0026gt; \u0026lt;!-- id=\u0026#39;外链播放器id\u0026#39;,必须参数 type=[song=单曲, playlist=歌单, album=专辑, search=搜索结果, artist=艺术家],必须参数 server=[netease=网易云音乐, tencent=QQ音乐, kugou=酷狗音乐, xiami=虾米音乐, baidu=百度音乐],必须参数 fixed=启用固定模式，固定在左下角,默认false mini=启用迷你模式,默认false preload=[none,metadata,auto] mutex=[互斥锁，默认true],默认false order=[random=随机播放,list=列表播放] loop=[all=全部循环, one=循环一次 ,none=不循环] volume=[音量，默认0.7] lrc-type=[歌词类型，默认0] list-folded=[列表是否折叠，默认false] list-max-height=列表最大高度,默认340px storage-name=本地存储存储密钥，用于存储播放器设置,默认metingjs --\u0026gt; 更多请参考：MetingJS官方文档\n2 音乐播放器样式切换 通过上述方式引入的音乐播放器会出现在主题切换亮/暗色模式时，音乐播放器没有切换的问题\n（1）通过阅读Stack主题的源码可以看到，主题样式的切换是通过[data-scheme=\u0026quot;light/darck\u0026quot;] {...} （2）所有我们可以准备两种Aplayer的css，用[data-scheme=\u0026quot;light\u0026quot;]{ 亮的css样式 }包裹亮的，用[data-scheme=\u0026quot;dark\u0026quot;]{ 暗的css样式 }包裹暗的，这里直接给各位准备好了 aplayer-dark.scss（Ctrl+S保存） aplayer-light.scss（Ctrl+S保存） （3）然后在博客主目录中创建文件assets\\scss\\custom.scss，此文件为Stack主题作者留给我们加入自定义样式用的文件(可以查看主题源码同路径文件找到) （4）将上述两个scss文件放到跟 custom.scss同目录下，并通过@import来进行引入文件 1 2 3 4 5 /** * 【custom.scss】 */ @import \u0026#34;aplayer-light.scss\u0026#34;; @import \u0026#34;aplayer-dark.scss\u0026#34;; （5）既然音乐播放器的css已经被我们改为从本地文件引入，那么custom.html中的link标签就可以注释或者删掉了 至此样式随主题切换就已经完成了\n","date":"2025-09-13T13:42:44+08:00","image":"https://Shiliumi.github.io/p/0913-aplayer/cover_hu_a75677b917af0393.jpg","permalink":"https://Shiliumi.github.io/p/0913-aplayer/","title":"APlayer \u0026 MetingJS+PJAX引入音乐播放器"}]